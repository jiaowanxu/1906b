2020-6-16
-------------------------------------------------购物车功能-------------------------------------------------------
	登陆状态操作购物车
		a、业务逻辑
			1、使用redis存储商品列表
			2、使用hash对购物车进行归类
		b、查询购物车
			usian_cart_web
				controller
					1、获取cookie中的购物车
					2、将获取到的购物车存到一个Map里面
					3、从购物车得到商品信息放到set里面
					4、遍历，然后在存到list集合里
		c、修改购物车
			usian_cart_web
				controller
					1、获得cookie的购物车
					2、修改购物车中的商品
					3、把购物车写到redis
		d、删除购物车
			usian_cart_web
				controller
					获取redis里的购物车
					根据itemId对购物车里面的信息进行移除
					最后将购物车里面的信息重新写到redis里面
					
	购物车同步
		业务逻辑
			在用户未登录情况下往购物车添加商品，添加结束用户登录，此时需把cookie中的数据同步到redis：
				a)如果redis中有数据cookie中也有数据，需要做数据合并。相同商品数量相加，不同商品添加一个新商品。
				b)把cookie中的数据删除，避免下次重复同步

-------------------------------------------------订单功能-------------------------------------------------------
		- 订单分析
		- 用户身份认证
		- 展示订单确认页面
		
	一、订单分析
		1、在购物车页面点击“去结算”按钮跳转到订单确认页面
			a) 展示商品列表
			
		2、展示订单确认页面之前，应该确认用户身份
			a) 如果用户未登录或登录过期跳转到登录页面
			b) 登录成功后再跳转到订单确认页面
		
		
	二、工程创建
		usian_order_web
		
		usian_order_feign
		
		usian_order_service
		
	三、用户身份认证
			在展示订单确认页面之前，需要对用户身份进行认证，要求用户必须登录。
			
		1、功能分析
			使用springmvc的拦截器拦截所有订单的请求
		2、业务逻辑
			a)  从cookie中取token。
			b) 根据token调用sso服务查询用户信息。
			c) 如果查不到用户信息则跳转到登录页面。
			d) 查询到用户信息放行。
			
		3、逻辑实现
			在usian_order_web 中
				a、配置一拦截器，实现 HandlerInterceptor 重写preHandle（请求前进行拦截）
						对用户的token做判断和校验用户在redis中是否失效 如果为空返回false,反之返回true
				b、拦截器配置类 实现 WebMvcConfigurer  重写addInterceptors（告诉springmvc要往容器中注入的是拦截器）
					 配置 拦截哪个URI
						registration.addPathPatterns("/frontend/order/**");
	
	四、展示订单确认页面
		a、业务逻辑
			1、在购物车页面点击“去结算”按钮跳转到订单确认页面。
			2、请求的url：/frontend/order/goSettlement
			3、参数：ids，userId，token
			4、查询redis中的购物车数据并返回给前端
			5、配送地址列表，需要用户登录。需要根据用户id查询收货地址列表。静态数据。
			6、支付方式。静态数据。
			
		b、实现
			1、注入	cartServiceFeignClient（获取购物车）
			2、从购物车中获取选中的商品（前台传来的商品id数组 ids[]）
			3、遍历数组（获取商品存入List集合返回前端）
			
